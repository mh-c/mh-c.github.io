<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mh&#39;s Blog</title>
    <link>https://mh-c.github.io/post/</link>
    <description>Recent content in Posts on Mh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mh-c.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Laravel Lifecycle Overview</title>
      <link>https://mh-c.github.io/post/laravel-lifecycle-overview/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mh-c.github.io/post/laravel-lifecycle-overview/</guid>
      <description>####First Things#### Entry point: public/index.php Key code: //loads the Composer generated autoloader definition require DIR.&amp;lsquo;/../bootstrap/autoload.php&amp;rsquo;; //Retrieve an instance of the app/service container $app = require_once DIR.&amp;lsquo;/../bootstrap/app.php&amp;rsquo;;
####HTTP/Console kernels#### 1. Request comes in kernel 2. Kernal defines an array of bootstrapers who: configure error handling, configure logging, detect the application environment, and perform other tasks that need to be done before the request is actually handled. 3. Kernal defines a list of middleware who: handle read and writing HTTP session, determine maintenance mode, verify CSRF token etc&amp;hellip; 4.</description>
    </item>
    
    <item>
      <title>User Agent Note</title>
      <link>https://mh-c.github.io/post/useragent/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mh-c.github.io/post/useragent/</guid>
      <description>User agent Software (a software agent) that is acting on behalf of a user. This term when refering to web browser, is a String (or a line of text) telling a web site information about the browser and operating system. A User-Agent field is included in HTTP header when a browser connects to a website.  ###PHP syntax:###
$u_agent = $_SERVER[&#39;HTTP_USER_AGENT&#39;];  Use of RegExp to identify browsers/OS Something like:</description>
    </item>
    
    <item>
      <title>詹猩猩</title>
      <link>https://mh-c.github.io/post/07final_g2/</link>
      <pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mh-c.github.io/post/07final_g2/</guid>
      <description>时隔了这么多年，终于又看起了NBA文字直播。 (小tips: use &amp;ldquo; &amp;rdquo; for \n in markdown) 2017总决赛G2，实习中有点闲，刷一刷google APAC test,看看</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://mh-c.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mh-c.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://mh-c.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mh-c.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
  </channel>
</rss>